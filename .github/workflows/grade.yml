name: Autograding

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      is_local:
        required: true
        type: boolean
      actor:
        required: true
        type: string

jobs:
  autograding:
    permissions: write-all
    runs-on: ubuntu-22.04
    steps:
      - name: Printing initial message
        id: status-comment
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const comment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "We have started grading your submission! Be patient!",
            })
            const commentId = comment["data"]["id"]
            return commentId
      - name: Exporting environment variables
        run: |
          echo "REPO_NAME=$(echo ${{ inputs.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "STATUS_COMMENT_ID=$(echo ${{ steps.status-comment.outputs.result }})" >> $GITHUB_ENV
          echo "START=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
      - name: Variables
        run: |
          echo ${{ inputs.repository }}
          echo ${{ inputs.is_local }}
          echo ${{ inputs.actor }}
          echo ${{ env.REPO_NAME }}
          echo ${{ env.STATUS_COMMENT_ID }}
          echo ${{ env.START }}
      - name: Installing Python (only on act)
        if: ${{ inputs.is_local }}
        run: |
          apt update
          apt install -y python3 python3-pip git
      - name: Checking out submission repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.actor }}/${{ env.REPO_NAME }}
          token: ${{ secrets.ORG_PAT }}
          path: main
          fetch-depth: 0
      - name: Checking out solutions repository
        uses: actions/checkout@v4
        with:
          repository: git-mastery/solution-${{ env.REPO_NAME }}
          token: ${{ secrets.ORG_PAT }}
          path: solution/
          fetch-depth: 0
      - name: Setup Python (only on Github Actions)
        if: ${{ ! inputs.is_local }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Installing Python dependencies
        working-directory: solution
        run: |
          pip install -r requirements.txt
      - name: Run Python
        run: |
          python3 grade.py
        working-directory: solution
        env:
          base_repository: ${{ inputs.repository }}
          is_local: ${{ inputs.is_local }}
          repository_name: ${{ env.REPO_NAME }}
      - name: Copy Python script output to root folder
        run: |
          cp output/output.json ./output.json
      - name: Current directory files
        run: |
          ls
      - name: Print context details
        uses: actions/github-script@v7
        with:
          script: |
            console.log(context)
      - name: Process output
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs')
              const jsonString = fs.readFileSync('./output.json')
              const content = JSON.parse(jsonString)
              const statusCommentId = process.env.STATUS_COMMENT_ID
              if (content["errors"].length > 0) {
                let body = "|Name|Details|\n|---|---|\n|Status|Unsuccessful ❌|\n|Comments|<ul>"
                for (const comment of content["errors"]) {
                  body += `<li>${comment}</li>`
                }
                body += "</ul>"
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: statusCommentId,
                  body: body,
                })
              } else {
                let body = "|Name|Details|\n|---|---|\n|Status|Successful ✅|\n|Comments|Great work! On to the next one!</ul>"
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: statusCommentId,
                  body: body,
                })
              }

              const studentId = context.payload.sender.id
              console.log(studentId)
              let progressContent
              const entry = { 
                "exercise_name": process.env.REPO_NAME, 
                "started_at": process.env.START, 
                "comments": content["errors"] 
              }

              try {
                const studentProgressFile = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: "progress-tracker",
                  path: `progress/${studentId}.json`
                })
                const existingFileContents = JSON.parse(studentProgressFile) 
                existingFileContents.push(entry)
                progressContent = btoa(JSON.stringify(existingFileContents))
              } catch (err) {
                console.log(err)
                progressContent = btoa(JSON.stringify([entry]))
              }
              console.log(progressContent)
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: "progress-tracker",
                path: `progress/${studentId}.json`,
                message: `Progress update for ${context.payload.sender.login} for exercise ${process.env.REPO_NAME}`,
                content: progressContent
              })
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              console.log(err)
              core.setFailed(err)
            }
