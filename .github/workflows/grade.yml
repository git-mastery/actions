name: Autograding

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      is_local:
        required: true
        type: boolean
      actor:
        required: true
        type: string

jobs:
  autograding:
    permissions: write-all
    runs-on: ubuntu-22.04
    steps:
      - name: Printing initial message
        id: status-comment
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const comment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## Autograding started!\nWe have started grading your submission! Be patient!",
            })
            const commentId = comment["data"]["id"]
            return commentId

      - name: Exporting environment variables
        run: |
          echo "REPO_NAME=$(echo ${{ inputs.repository }} | cut -d'/' -f2)" >> $GITHUB_ENV
          echo "STATUS_COMMENT_ID=$(echo ${{ steps.status-comment.outputs.result }})" >> $GITHUB_ENV
          echo "START=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Variables
        if: ${{ inputs.is_local }}
        run: |
          echo ${{ inputs.repository }}
          echo ${{ inputs.is_local }}
          echo ${{ inputs.actor }}
          echo ${{ env.REPO_NAME }}
          echo ${{ env.STATUS_COMMENT_ID }}
          echo ${{ env.START }}

      - name: Installing Python (only on act)
        if: ${{ inputs.is_local }}
        run: |
          apt update
          apt install -y python3 python3-pip git

      - name: Checking out submission repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.actor }}/${{ env.REPO_NAME }}
          token: ${{ secrets.ORG_PAT }}
          path: main/
          fetch-depth: 0

      - name: Checking out solutions repository
        uses: actions/checkout@v4
        with:
          repository: git-mastery/solution-${{ env.REPO_NAME }}
          token: ${{ secrets.ORG_PAT }}
          path: solution/
          fetch-depth: 0

      - name: Setup Python (only on Github Actions)
        if: ${{ ! inputs.is_local }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Installing Python dependencies
        working-directory: solution
        run: |
          pip install -r requirements.txt

      - name: Run Python
        run: |
          python3 grade.py
        working-directory: solution
        env:
          base_repository: ${{ inputs.repository }}
          is_local: ${{ inputs.is_local }}
          repository_name: ${{ env.REPO_NAME }}

      - name: Copy Python script output to root folder
        run: |
          cp output/output.json ./output.json

      - name: Process output
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs')
              const jsonString = fs.readFileSync('./output.json')
              const content = JSON.parse(jsonString)
              const statusCommentId = process.env.STATUS_COMMENT_ID

              const startedAt = new Date(0)
              startedAt.setUTCSeconds(content["started_at"])

              const completedAt = new Date(0)
              completedAt.setUTCSeconds(content["completed_at"])

              const exerciseName = content["exercise_name"]

              const status = content["status"]
              const emoji = status === "SUCCESSFUL" ? "✅" : status === "UNSUCCESSFUL" ? "❌" : "⚠️"
              const statusMessage = `${status} ${emoji}`

            const joinedComments = content["comments"].length > 0 ? content["comments"].map(comment => "<li>" + comment + "</li>").join("\n") : "No comments"

              let body = `## Autograding status...

            |Name|Details|
            |----|-------|
            |**Exercise name**|${exerciseName}|
            |**Status**|${statusMessage}|
            |**Job started at**|${startedAt.toLocaleString("en-SG")}|
            |**Job completed at**|${completedAt.toLocaleString("en-SG")}|
            |**Job took**|${completedAt.getTime() - startedAt.getTime()} ms|
            |**Comments**|<ul>${joinedComments}</ul>|`
              const cleanBody = body.replace(/  +g/, '')
              console.log(cleanBody)

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: statusCommentId,
                body: cleanBody,
              })
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }

      - name: Publish progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            try {
              const fs = require('fs')
              const jsonString = fs.readFileSync('./output.json')
              const content = JSON.parse(jsonString)
              const studentId = context.payload.sender.id

              const entry = { 
                "exercise_name": process.env.REPO_NAME, 
                "started_at": content["started_at"], 
                "completed_at": content["completed_at"], 
                "comments": content["comments"],
                "status": content["status"],
              }

              try {
                const studentProgressFile = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: "progress-tracker",
                  path: `progress/${studentId}.json`
                })
                const existingFileContents = JSON.parse(atob(studentProgressFile.data.content)) 
                const sha = studentProgressFile.data.sha
                existingFileContents.push(entry)
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: "progress-tracker",
                  path: `progress/${studentId}.json`,
                  sha: sha,
                  message: `Progress update for ${context.payload.sender.login} for exercise ${process.env.REPO_NAME}`,
                  content: btoa(JSON.stringify(existingFileContents))
                })
              } catch (err) {
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: "progress-tracker",
                  path: `progress/${studentId}.json`,
                  message: `Progress update for ${context.payload.sender.login} for exercise ${process.env.REPO_NAME}`,
                  content: btoa(JSON.stringify([entry]))
                })
              }
            } catch(err) {
              core.error("Error while reading or parsing the JSON")
              core.setFailed(err)
            }

      - name: Update status comment with error status
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            const statusCommentId = process.env.STATUS_COMMENT_ID
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: statusCommentId,
            body: "### Oops! Something happened with the autograder\nContact [woojiahao1234@gmail.com](mailto:woojiahao1234@gmail.com) about the issue.",
            })
